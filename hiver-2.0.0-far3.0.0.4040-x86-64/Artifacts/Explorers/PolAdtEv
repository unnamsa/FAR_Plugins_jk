--!RE:/.*\\Policy\\PolAdtEv\\\.\(default\)/

local EHDR = "Audit Policy value Explorer"

local ffi = require "ffi"
local GUID, hInstA, hInstP, sTmpFile, sArg1, xArg2 = ... 
-- far.Message(sArg1, "Audit Policy value Explorer")

-- The type of the value MUST be binary
if  not(type(xArg2) =="table")  or  not(type(xArg2[1]) == "string")  then
    return far.Message("Invalid argument2 type", EHDR.." ERROR")
end

local tCategories = {
          {"System",            {"Security State Change","Security System Extension","System Integrity","IPsec Driver","Other System Events"}},
          {"Logon and Logoff",  {"Logon","Logoff","Account Lockout","IPsec Main Mode","Special Logon","IPsec Quick Mode","IPsec Extended Mode",
                                 "Other Logon(Logoff) Events","Network Policy Server","User or Device Claims","Group Membership"}},
          {"Object Access",     {"File System","Registry","Kernel Object","SAM","Other Object Access Events","Certification Services",
                                 "Application Generated","Handle Manipulation","File Share","Filtering Platform Packet Drop",
                                 "Filtering Platform Connection","Detailed File Share","Removable Storage","Central Access Policy Staging"}},
          {"Privilege Use",     {"Sensitive Privilege Use","Non Sensitive Privilege Use","Other Privilege Use Events"}},
          {"Detailed Tracking", {"Process Creation","Process Termination","DPAPI Activity","RPC Events","PNP Activity"}},
          {"Policy Change",     {"Audit Policy Change","Authentication Policy Change","Authorization Policy Change",
                                 "MPSSVC Rule-Level Policy Change","Filtering Platform Policy Change","Other Policy Change Events"}},
          {"Account Management",{"User Account Management","Computer Account Management","Security Group Management",
                                 "Distribution Group Management","Application Group Management","Other Account Management Events"}},
          {"DS Access",         {"Directory Service Access","Directory Service Changes","Directory Service Replication","Detailed Directory Service Replication"}},
          {"Account Logon",     {"Credential Validation","Kerberos Service Ticket Operations","Other Account Logon Events","Kerberos Authentication Service"}}
      }
local tAudit   = {"Not Audited", "Audited SUCCESS", "Audited FAIL", "Audited SUCCESS and FAIL"}

local aList    = ffi.cast ("short*", xArg2[1])                 -- Represent the registry key value as array of int16
local nVLen    = #xArg2[1]                                     -- The key value length
local bOldFmt  = (nVLen <= 44)                                 -- NT4 or XP value format
local nCatStrt = (bOldFmt) and  2  or  6                       -- Prepare to iterate categories (start idx of the first one)
local nMaxCat  = (bOldFmt) and  tonumber(aList[nVLen/2 - 2])   -- Number of audit categories
                           or   tonumber(aList[2]) 


-- Open the output file
local hTmp  = assert(io.open(sTmpFile, "a+"))
if    hTmp    then

    -- Iterate audit categories
    for nCat = 1, nMaxCat do

        local nCatLen    = (bOldFmt) and  2  or  tonumber(aList[ aList[4]/2 + nCat-1 ])   -- The category section length in WORDs
        local nMaxSubCat = (bOldFmt) and  0  or  nCatLen 

        -- Category line (for NT4 or XP formatb this is the only line, because there is no subcategories in this format)
        hTmp:write (string.format("; 0x%08x; %5d; %3d; %-64s; %s\n", 
            nCatStrt * 2, 
            nCatLen  * 2, 
            0, 
            (nCat <= #tCategories) and  tCategories[nCat][1]  or  nCat .. " - unknown Audit Category", 
            (not bOldFmt) and  ""   or  tAudit[ tonumber(aList[nCatStrt]) + 1 ] 
        ))
    
        -- Iterate subcategories
        for nSub = 1, nMaxSubCat  do

            hTmp:write (string.format("; 0x%08x; %5d; %3d; %-64s; %s\n", 
                nCatStrt * 2 + (nSub-1) * 2, 
                2, 
                1, 
                (nCat <= #tCategories and nSub <= #tCategories[nCat][2]) and  tCategories[nCat][2][nSub]  or  nSub .. " - unknown SubCategory", 
                tAudit[ tonumber(aList[nCatStrt+nSub-1]) + 1 ]
            ))

        end

        nCatStrt = nCatStrt + nCatLen
    end

    -- Close the TMP-file
    hTmp:close()
else
    return far.Message("Error opening TmpFile", EHDR.." ERROR")
end

-- return true if the parsing was successfull
return  true
