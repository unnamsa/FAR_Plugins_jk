--!RE:/\\TreeView\\SAM\\([^\\]+\\)*V$/

local EHDR = "SAM User Descriptor Explorer"
local GUID, hInstA, hInstP, sTmpFile, sArg1, xArg2 = ... 

-- Include libsam.lua
local libSAM = dofile (debug.getinfo(1).source:match("@(.*\\)[^\\]*$").."..\\Libs\\libsam.lua")

-- Get plugin handle
local hInst = hInstA  or hInstP  or  unpack({nil, far.Message("No HIVER instance found", EHDR.." ERROR")})
if  not hInst then return end

-- Duplicate currently open HIVE handle
local hHive = Plugin.SyncCall (GUID, hInst, "DupHandle")  or
              unpack({nil, far.Message("HIVER DupHandle not successfull", EHDR.." ERROR")})
if  not hHive then return end

-- The type of the value MUST be binary
if  not(type(xArg2) =="table")  or  not(type(xArg2[1]) == "string")  then
    return far.Message("Invalid argument2 type\n"..type(xArg2), EHDR.." ERROR")
end

-- Parse the registry value
local Parsed = libSAM.Parse_V( xArg2[1] )
if  not Parsed  then
    return far.Message("Unsuccessfull User Descriptor parsing...", EHDR.." ERROR")
end

-- Parse the Security Descrptor structure
local Names,Values,Descs,Offsets,Lengths,Depths = Plugin.SyncCall (GUID, hHive, "parse SecDesc", Parsed.SD)
if  not Names  then
    return far.Message("Unsuccessfull Security Descrptor parsing...", EHDR.." ERROR")
end

-- Open the output file
local hTmp  = assert(io.open(sTmpFile, "a+"))
if    hTmp    then

    -- Output the Security Descriptor structure        
    for i,_ in ipairs(Names) do
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Offsets[i]+Parsed.nOffsSD, Lengths[i], Depths[i], Names[i], Descs[i]))
    end

    -- Depending on the record format output machine's SID or the user's name
    if  (Parsed.nFormat == 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsSID,  Parsed.nLenSID,  0, "Common SID", Parsed.sMachSID))
    else
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsName, Parsed.nLenName, 0, "UserName", Parsed.sUserName))
    end


    -- Output the rest of fields (if any)
    if  (Parsed.nLenFName  and  Parsed.nLenFName > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsFName, Parsed.nLenFName, 0, "FullName", Parsed.sUserFName))
    end
    if  (Parsed.nLenComm  and  Parsed.nLenComm > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsComm, Parsed.nLenComm, 0, "Comment",   Parsed.sComment))
    end
    if  (Parsed.nLenHome  and  Parsed.nLenHome > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsHome, Parsed.nLenHome, 0, "Home Directory", Parsed.sHomeDir))
    end
    if  (Parsed.nLenNDrv  and  Parsed.nLenNDrv > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsNDrv, Parsed.nLenNDrv, 0, "Home DriveLetter", Parsed.sNetDrive))
    end
    if  (Parsed.nLenScrp  and  Parsed.nLenScrp > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsScrp, Parsed.nLenScrp, 0, "Login Script", Parsed.sScriptNm))
    end
    if  (Parsed.nLenProf  and  Parsed.nLenProf > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsProf, Parsed.nLenProf, 0, "Profile Directory", Parsed.sProfDir))
    end
    if  (Parsed.nLenLMCh  and  Parsed.nLenLMCh > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsLMCh, Parsed.nLenLMCh, 0, "Password LMCache", "<BootKeyed!>"))
    end
    if  (Parsed.nLenNTCh  and  Parsed.nLenNTCh > 0)  then
        hTmp:write (string.format("%s; 0x%08x; %5d; %3d; %-64s; %s\n", 
                                  sArg1, Parsed.nOffsNTCh, Parsed.nLenNTCh, 0, "Password NTCache", "<BootKeyed!>"))
    end

    -- Close the TMP-file
    hTmp:close()
else
    return far.Message("Error opening TmpFile", EHDR.." ERROR")
end

-- return true if the parsing was successfull
return  (type(Names) == "table")
