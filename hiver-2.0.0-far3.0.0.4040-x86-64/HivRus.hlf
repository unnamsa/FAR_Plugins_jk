.Language=Russian,Russian (Русский)
.PluginContents=плагин HIVER

@Contents
$^#Hiver - анализ содержимого HIVE-файлов системного реестра#

~Общее описание плагина~@General@

~Конфигурирование плагина~@Config@

~Функциональные клавиши~@Keys@

~Вызов плагина из меню дисков~@DiskMenu@

~Вызов плагина из командной строки~@Command@

~Вызов плагина из LUA-программы~@CallFromMacro@

~Вызов LUA-программы из плагина~@CallMacro@

~Раскрытие внутренней структуры элементов данных HIVE-файла~@Explorers@

~БЫСТРЫЙ поиск информации в HIVE-файле~@FastSearch@

@General
$^#Hiver - анализ содержимого HIVE-файлов системного реестра#

Данный плагин позволяет с точностью "до байта" исследовать содержимое файлов системного реестра.
Исследуемый файл открывается "только на чтение". Права администратора не требуются. 

Анализируемый файл отображается в виде виртуальной файловой системы, 
в которой сложные объекты представлены в виде папок, а конечные поля данных - в виде файлов.

Помимо традиционного режима просмотра в виде дерева из ключей и значений (#TreeView#),
предусмотрен также режим просмотра #RawView# - на уровне базовых структур (HBIN и CELL) HIVE-файла.
В этом режиме возможен просмотр содержимого любых ячеек (CELL-ов) HIVE-файла, в том числе и недоступных
из #TreeView# (например, помеченных как ПУСТЫЕ). Элементы данных, представляющие собой ссылки 
на другие ячейки, отображаются в данном режиме просмотра в виде SymLink-ов.  Если целевая ячейка 
представляет собой сложный объект, она может быть раскрыта простым нажатием <ENTER> на SymLink-е.
Найти SymLink, ссылающийся на данную ячейку, можно с помощью комбинации клавиш #Shift-F7#.

Виртуальная директория #Statistics# позволяет по-отдельности работать с ячейками определенного типа.
Так, например, виртуальная директория #\Statistics\key# отображает все ключи, содержащиеся в HIVE-файле, и
позволяет оперировать с ними стандартными средствами FAR (скажем, отсортировать по времени модификации).
Также, возможно получение списка пустых ячеек (тип <empty>) или ячеек, на которые нет ссылок
из других ячеек. Такие ячейки имеют тип <unknown> и их наличие обычно указывает на повреждение HIVE-файла.


Любой элемент данных в любом из режимов просмотра может быть ~отображен в шестнадцатеричном виде~@HexView@ 
с помощью клавиши #F3#.
Нажатие F3 на SymLink-е показывает только 4-байтовую ссылку на соответствующую ячейку. Для просмотра содержимого целевой
ячейки следует использовать #Alt-F3#.

HIVE-файл в целом также может быть отображен в шестнадцатеричном виде. Для этого следует использовать 
комбинацию #Ctrl-Shift-F3# из любого режима просмотра. 

Комбинация #Alt-F10# позволяет переключаться между режимами просмотра. Кроме того, при выходе по #Alt-F10#
из шестнадцатеричного отображения HIVE-файла, плагин запоминает позицию курсора, что позволяет
при следующем нажатии на #Ctrl-Shift-F3# вернуться в ту же точку HIVE-файла.
Это позволяет организовать ~БЫСТРЫЙ поиск информации в HIVE-файле~@FastSearch@.

Несмотря на то, что плагин поддерживает стандартный FAR-овский поиск по #Alt-F7#, пользоваться им при работе
с большими HIVE-файлами следует с осмотрительностью из-за очень низкой скорости работы. 
Тем не менее, данная возможность может быть полезна, например, при поиске нужного контекста в пустых ячейках 
HIVE-файла (виртуальная директория #\Statistics\empty#).


Одной из наиболее важных функциональных возможностей плагина является 
возможность пристыковывать к нему LUA-программы, предназначенные для извлечения из HIVE-файлов
самой разнообразной информации (так называемых ~артефактов~@ArtiFacts@), а также для раскрытия 
~внутренней структуры элементов данных~@Explorers@ HIVE-файлов.


Запуск плагина возможен по нажатию #Enter# или #Ctrl-PgDn# на файле 
соответствующего формата, из меню плагинов (#F11#) панели FAR-а, путем набора в командной строке FAR'а ~команды~@Command@ 
с префиксом "hive:" (или любым иным префиксом, задаваемым в диалоге ~конфигурации плагина~@Config@), 
из ~LUA-программы~@CallFromMacro@, из ~меню дисков~@DiskMenu@ (#Alt-F1# или #Alt-F2#), 
а также из ~истории папок~@Config@ (#Alt-F12#) .



@Config
$^#Диалог конфигурации плагина#

Диалог конфигурации плагина HIVER включает в себя группу полей под общим заголовком "Запуск плагина",
а также ряд полей, управляющих отдельными опциями плагина.

Поля, входящие в группу #Запуск плагина#, определяют реацию плагина на нажатие клавиш #Enter#, #Ctrl-PgDn#
и #F11#, а также позволяют задать префикс, с помощью которого плагин может быть вызван из командной строки FAR-а 
(по умолчанию - #hive:#).

Параметр #Начальный режим просмотра# определяет начальный вид панели, в которой открывается плагин.
Значение параметра #Длинные описания# соответствует стандартному режиму #Ctrl-7#,
#Короткие описания# - режиму #Ctrl-6#, а 
#Последний ранее использованный режим# восстанавливает тот вид панели, который использовался в момент
предыдущего закрытия панели плагина.

Параметр #Показывать результат EXPLORE VALUE как# задает способ обработки плагином результатов работы
~браузеров~@Explorers@ внутренней структуры элементов данных HIVE-файлов.
Значение #Текстовый файл# задает отображение результата работы браузера в виде генерируемого им текстового файла.
Данный режим работы полезен, например, при отладке браузеров. Также, данный режим отображения позволяет
сохранить результат работы браузера для последующего анализа.
Значение #Виртуальная директория# задает отображение результата работы браузера в виде директории в панели плагина.

Параметр #Сохранять историю виртуальных папок# позволяет задать для плагина режим сохранения путей
просматриваемых в панели плагина виртуальных папок в истории папок FAR-а. 
Указанная история папок доступна по клавише #Alt-F12#. Выбор соответствующего элемента истории папок
позволяет "в один клик" запустить плагин, открыть в панели плагина требуемый HIVE-файл и позиционировать указанный
HIVE-файл на требуемой виртуальной директории.
Следует отметить, что при работе в данном режиме плагин сохраняет в истории папок FAR-а в том числе и
виртуальные папки, образованные в результате ~Раскрытия внутренней структуры~@Explorers@ элементов данных HIVE-файлаё.
Однако, автоматическое позиционирование на такие папки плагином не поддерживается.



@HexView
$^#Окно шестнадцатеричного просмотра HIVE-файла#

Формат окна шестнадцатеричного просмотра аналогичен формату окна плагина HEXITOR.
Единственным существенным дополнением является наличие панели анализа "данных под курсором".

Данная панель включается/отключается клавишей #F6# и отражает в различных форматах фрагмент содержимого файла,
начинающийся с байта, соответствующего текущему положению курсора.


Панель поддерживает отображение данных под курсором в виде:

- целочисленных знаковых и беззнаковых значений различной длины (от BYTE до QWORD),

- значений с плавающей точкой различной точности (SINGLE и DOUBLE),

- значений даты и времени в стандартах NTFS FILETIME (8 байт), DOS FILETIME (4 байта) и VARIANT TIME (8 байт).

Значения даты и времени отображаются только в том случае, когда данные под курсором могут трактоваться, 
как допустимое внутреннее представление даты и времени в соответствующем стандарте.


@FastSearch
$^#БЫСТРЫЙ поиск информации в HIVE-файле#

1. Открываем HIVE-файл в панели FAR-a;

2. Жмем #Ctrl-Shift-F3# и попадаем в шестнадцатеричный просмотр HIVE-файла;

3. Жмем #F7# и вводим искомый контекст;

4. Если контекст найден и есть желание посмотреть, к какой ячейке или к какому ключу он относится,
жмем #Alt-F10# (1 или 2 раза, соответственно);

5. Жмем #Ctrl-Shift-F3# и возвращаемся в шестнадцатеричный просмотр HIVE-файла (в ту же точку, из которой вышли по Alt-F10)

6. Жмем #Shift-F7# для поиска следующего вхождения контекста.


@CallMacro
$^#Вызов LUA-программы из плагина#

В плагине реализованы два механизма вызова подключаемых LUA-программ:

    1. Вызов LUA-программы из поддиректории #Artifacts# директории плагина для формирования тех или иных отчетов о содержимом HIVE-файла.
Данный механизм реализуется консольной командой ~hive:@@<artifact>~@Command@

    2. Вызов LUA-программы из поддиректории #Artifacts\Explorers# директории плагина для разбора внутренней структуры значений ключей HIVE-файла.
Данный механизм реализуется консольной командой ~hive:explore~@Explorers@


@Explorers
$^#Раскрытие внутренней структуры элементов данных HIVE-файла#

Раскрытие внутренней структуры элементов данных HIVE-файла является результатом выполнения команды #explore#.
Указанная команда может быть выдана из ~командной строки FAR-а~@Command@ или
с помощью ~функциональной клавиши~@Keys@ в панели плагина. 
В процессе выполнения данной команды плагин вызывает так называемый #браузер# - специальную LUA-программу,
соответствующую рассматриваемому элементу данных HIVE-файла и "знающую" его внутреннюю структуру.
Поддиректория #Artifacts\Explorers# в директории плагина содержит тексты таких LUA-программ.

Для виртуальных файлов, отображающих значения ключей HIVE-файла (в режиме #TreeView#) и имеющих соответствующий
браузер, плагин при их отображении на панели выставляет атрибуты #VIRTUAL# и #SPARSE#.
Это дает возможность при соответствующей настройке ~раскраски файлов~@:Highlight@ выделять на панели плагина
значения ключей HIVE-файла, для которых имеются браузеры их внутренней структуры.
Для автоматической настройки соответствующей раскраски файлов можно однократно после установки плагина
перейти в директорию плагина выдать из командной строки FAR-а команду:
@-

#lua:@@setup.lua#
@+

#ВНИМАНИЕ:# Для правильной работы программы автоматической настройки, в качестве языка интерфейса FAR-а
должен быть выбран "#English#".

Выбор программы-браузера, соответствующей рассматриваемому элементу данных HIVE-файла, осуществляется плагином
за счет сопоставления виртуального пути этого элемента данных с регулярным выражением, располагающимся в начале
текста каждого браузера.

Одно или несколько регулярных выражений, задающих соответствие браузера элементам данных HIVE-файла,
располагаются в одной или нескольких первых строках текста браузера после префикса #--!RE:# и ограничиваются
слева и справа символами "#/#", например:
@-

--!RE:/#.*\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Taskband\\Favorites$#/
--!RE:/#.*\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartPage(2)?\\Favorites$#/
@+

Все регулярные выражения, содержащиеся в текстах доступных плагину браузеров, 
считываются и компилируются однократно в момент инициализации плагина.
При необходимости загрузка и компиляция регулярных выражений может быть произведена вручную с
помощью нажатия на #Ctrl-Shift-X# в панели плагина. Это дает возможность добавлять в
директорию #Artifacts\Explorers# новые браузеры и активировать их без перезапуска FAR.

Браузер получает от плагина следующие параметры:

    #GUID#     - GUID плагина: "E129CB4A-03A6-434B-B1F3-A19C6258ECBC";

    #hInstA#   - хэндл HIVE-файла, открытого на активной панели FAR-а, либо nil;

    #hInstP#   - хэндл HIVE-файла, открытого на пассивной панели FAR-а, либо nil;

    #sTmpFile# - имя временного файла, в который браузер должен поместить результат своей работы;

    #sArg1#    - не используется;

    #xArg2#    - LUA-таблица, единственным элементом которой является LUA-строка, содержащая
               бинарное представление раскрываемого элемента данных HIVE-файла.


В случае успешного завершения работы браузер возвращает Boolean-значение TRUE.
Возврат браузером любого другого (в том числе не-Boolean) значения означает неуспешное завершение его работы.

Результат работы браузера (в случае успешного завершения его работы) представляет собой текстовый файл ~определенного формата~@ExplorerOutputFile@.
Указанный файл может быть импортирован плагином и отображен в виде поддерева виртуальных папок и файлов
(в случае включения опции "#Показывать результат EXPLORE VALUE как виртуальную директорию#" в ~диалоге конфигурации~@Config@ плагина),
либо отображен в неизменном виде во встроенном FAR-viewer'е.  



@ExplorerOutputFile
$^#Формат выходного файла браузера элемента данных HIVE-файла#

Результатом работы браузера элемента данных HIVE-файла является текстовый файл, каждая строка которого
соответствует одному элементу внутренней структуры указанного элемента данных и имеет следующий вид:


#[SomeText]; nItemOffset; nItemLength; nItemDepth; sItemName; sItemDescription#

Где:
    #SomeText#         - необязательный произвольный текст, не содержащий ";", который
                       при импорте игнорируется;

    #nItemOffset#      - шестнадцатеричное смещение соответствующего элемента внутренней структуры
                       внутри значения элемента данных HIVE-файла;

    #nItemLength#      - длина соответствующего элемента внутренней структуры
                       элемента данных HIVE-файла;

    #nItemDepth#       - глубина вложенности соответствующего элемента внутренней структуры;

    #sItemName#        - имя соответствующего элемента внутренней структуры;

    #sItemDescription# - описание соответствующего элемента внутренней структуры.


Примеры формирования таких файлов можно увидеть, включив опцию 
"#Показывать результат EXPLORE VALUE как текстовый файл#" в ~диалоге конфигурации~@Config@ плагина.


@Keys
$^#Использование функциональных клавиш#

Плагин обрабатывает следующие функциональные клавиши:


#F3#            - просмотр шестнадцатеричного внутреннего представления выбранного элемента данных;

#Alt-F3#        - для элементов типа #SymLink# просмотр внутреннего представления целевого элемента данных,
                для элементов типа #ключ# или #значение# реестра (в виртуальной директории #TreeView#) - просмотр соответствующей ячейки HIVE-файла,
                в остальных случаях действие аналогично клавише #F3#;

#Shift-F3#      - просмотреть ~внутреннюю структуру~@Explorers@ выбранного элемента данных;

#Ctrl-Shift-F3# - просмотреть шестнадцатеричное представление HIVE-файла в целом;

#F5#            - копировать выбранные элементы данных HIVE-файла;

#Shift-F5#      - экспортировать выбранный элемент данных из виртуальной директории #TreeView# в .reg файл;

#Shift-F7#      - найти ячейку HIVE-файла, содержащую ссылку на данную ячейку;

#Alt-F10#       - при нажатии в режиме просмотра шестнадцатеричного внутреннего представления HIVE-файла:
                    выход из режима просмотра с сохранением текущей позиции курсора
                    (данная опция позволяет осуществлять ~БЫСТРЫЙ поиск информации в HIVE-файле~@FastSearch@);
                при нажатии в иных режимах:
                    быстрое переключение между #TreeView# и #RawView#.


@DiskMenu
$^#Вызов плагина из меню дисков#

При открытии HIVE-файла в панели FAR-а плагин добавляет соответствующий элемент в меню дисков.

При выборе указанного элемента и, соответственно, вызове плагина из меню дисков HIVE-файл физически не открывается и не перечитывается. 
Фактически, выбранная по #Alt-F1# или #Alt-F2# панель становится еще одним окном просмотра для уже открытого и загруженного в память HIVE-файла.

При этом, панели просмотра HIVE-файла полностью независимы друг от друга. Завершение работы с данным HIVE-файлом в любой из панелей
никак не влияет на возможность продолжения работы с этим файлом через другую панель.

Образ HIVE-файла удаляется из памяти компьютера только после завершения работы с данным файлом в обеих панелях FAR-а.


@Command
$^#Вызов из командной строки#

Плагин поддерживает следующие вызовы из командной строки FAR-а:
@-


#hive:#
@+
Плагин анализирует сигнатуру и в случае успеха открывает текущий файл на АКТИВНОЙ панели FAR-а. 
@-


#hive:open <hive-file>#
@+
Плагин анализирует сигнатуру файла, заданного параметром <hive-file>, 
и в случае успеха открывает его на АКТИВНОЙ панели FAR-а. 
@-


#hive:@@<artifact> [arg1[ arg2]]#
@+
Вызов LUA-программы с именем #artifact# из поддиректории Artifacts директории плагина.
@-
Плагин передает LUA-программе следующие параметры:

local GUID, hInstA, hInstP, sTmpFile, sArg1, sArg2 = ... 

Где:
    GUID        - GUID плагина: "E129CB4A-03A6-434B-B1F3-A19C6258ECBC";
    hInstA      - хэндл HIVE-файла, открытого в активной панели, или nil;
    hInstP      - хэндл HIVE-файла, открытого в пассивной панели, или nil;
    sTmpFile    - имя временного файла для записи результата работы LUA-программы;
    sArg1,sArg2 - параметры arg1 и arg2 из командной строки. 

Например:

hive:@@userassist

@+
Вызывает LUA-программу .\Artifacts\userassist из директории плагина.

Если LUA-код возвращает Boolean-значение TRUE, плагин открывает
временный файл с результатами работы LUA-программы в стандартном FAR-viewer'e.
При необходимости можно сохранить содержимое данного файла, переключившись в редактор (F6)
и выполнив функцию "Сохранить как" (Shift-F2).

Если LUA-код возвращает Boolean-значение FALSE, вызов LUA-программы считается безуспешным
и временный файл с результатами ее работы не открывается.

@-


#hive:cd <hive-path>#
@+
Команда открывает заданную параметром <hive-path> виртуальную директорию
в HIVE-файле, открытом на АКТИВНОЙ панели FAR-а. В качестве разделителей элементов
пути могут произвольно использоваться как прямые, так и обратные слэши.
Поддерживаются как абсолютные, так и относительные пути, в том числе и вида: #..\SomeDir/SomeSubDir#
@-


#hive:explore#
@+
Команда предназначена для ~раскрытия внутренней структуры~@Explorers@ 
текущего элемента HIVE-файла с АКТИВНОЙ панели FAR-а. Раскрываемый элемент данных не должен быть виртуальной директорией.
@-


#hive:export [KeyOrValue [Prefix [OutFile]]]#
@+
Команда предназначена для экспорта ключей и значений HIVE-файла в текстовый .reg-файл.

Параметры:
    KeyOrValue - имя экспортируемого ключа или значения HIVE-файла (если не задано, 
                 берется текущий элемент с АКТИВНОЙ панели FAR-а);
    Prefix     - реальное имя (путь) ключа системного реестра, "под" который необходимо будет
                 поместить экспортируемые данные в случае импорта генерируемого .reg-файла в системный реестр;
    OutFile    - имя выходного .reg-файла (если не задано, результат работы команды записывается во
                 временный файл, который отображается с помощью встроенного FAR-viewer'a).

Например:
    hive:export \Treeview HKLM\Software software.reg

В случае необходимости выполнение данной команды может быть прервано нажатинем на #Ctrl-Break#.
@-


#hive:rot13#
@+
Команда перекодирует имена виртуальных файлов АКТИВНОЙ панели по алгоритму Rot13.
Предназначена для отображения в читабельном виде значений подключей Count ключа
HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist



@CallFromMacro
$^#Вызов из LUA-программ#

Для вызова плагина из LUA-программы используется следующий синтаксис (необязательные элементы
заключены в квадратные скобки, а повторяющиеся 0 или более раз - в фигурные):
@-

#[local Var{,VarN} =] Plugin.SyncCall (HiverGuid, HiveHandle, Command{, Parms})#

Где:
    Var .. VarN - LUA-переменные, в которые записываются возвращаемые плагином 
                  значения. Количество возвращаемых значений и их смысл
                  зависят от параметра #Command#;
    HiverGuid   - GUID плагина: "E129CB4A-03A6-434B-B1F3-A19C6258ECBC";
    HiveHandle  - хэндл HIVE-файла, к которому относится команда, или nil;
    Command     - команда, передаваемая плагину на исполнение (см. далее);
    Parms       - ноль или более параметров команды.
@+

В качестве параметра #Command# могут использоваться следующие команды (регистр букв не имеет значения): 

    ~#Ver#~@LUA_Ver@
    ~#Open#~@LUA_Open@
    ~#DupHandle#~@LUA_DupHandle@
    ~#CloseHandle#~@LUA_CloseHandle@
    ~#HiveName#~@LUA_HiveName@
    ~#CD#~@LUA_cd@
    ~#PWD#~@LUA_pwd@
    ~#GetItem#~@LUA_GetItem@
    ~#GetKeyItem#~@LUA_GetKeyItem@
    ~#GetValItem#~@LUA_GetValItem@
    ~#GetFileTime#~@LUA_GetFileTime@
    ~#GetDosTime#~@LUA_GetDosTime@
    ~#Rot13#~@LUA_Rot13@
    ~#Parse#~@LUA_Parse@


@LUA_Ver
$^#LUA-команда Ver#
@-

#local nPluginVersion = Plugin.SyncCall (HiverGuid, nil, "ver")#
@+

Команда возвращает версию плагина в виде числового значения.



@LUA_Open
$^#LUA-команда Open#
@-

#local HiveHandle = Plugin.SyncCall (HiverGuid, nil, Command)#

где параметр #Command# предствляет собой строку вида:

#"Open [\"]<hive-file>[\"]"#

@+

Команда открывает заданный HIVE-файл и возвращает его хэндл.

В качестве параметра #HiveHandle# должен быть передан #nil#. 

Опция #<hive-file># задает абсолютный путь HIVE-файла в реальной файловой системе.
Если имя HIVE-файла содержит пробелы, оно должно быть заключено в кавычки.

Например:
@-
local hHive = Plugin.SyncCall (HiverGuid, nil, "open \""..sArg1.."\"")
@+


@LUA_DupHandle
$^#LUA-команда DupHandle#
@-

#local DuplicatedHandle = Plugin.SyncCall (HiverGuid, HiveHandle, "DupHandle")#
@+

Команда создает и возвращает в качестве результата копию хэндла ранее открытого HIVE-файла.
Это позволяет организовать независимую сессию работы с уже открытым HIVE-файлом без его повторной
загрузки и разбора (что для очень больших HIVE-файлов может занимать несколько секунд).

Параметр #HiveHandle# задает исходный хэндл, в качестве которого может использоваться:

- хэндл, полученный LUA-программой, вызванной с помощью #hive:@@macro#,
в качестве входного параметра;

- хэндл, полученный в результате вызова Plugin.SyncCall (HiverGuid, nil, "#open# ...");

- хэндл, полученный в результате вызова Plugin.SyncCall (HiverGuid, HiveHandle, "#duphandle#");


Например:
@-

local GUID, hInstA, hInstP, sTmpFile, sArg1, sArg2 = ...
local hInst = hInstA  or hInstP  or  unpack({nil, far.Message("No hiver instance found")})
if  hInst then
    local hHive = Plugin.SyncCall (GUID, hInst, "DupHandle")
    . . .
    Plugin.SyncCall (GUID, hHive, "CloseHandle")
end
@+


@LUA_CloseHandle
$^#LUA-команда CloseHandle#
@-

#Plugin.SyncCall (HiverGuid, HiveHandle, "CloseHandle")#
@+

Команда закрывает хэндл ранее открытого HIVE-файла.
 
Параметр #HiveHandle# задает закрываемый хэндл.
При закрытии единственного (последнего) хэндла
HIVE-файла, его дерево разбора удаляется из памяти и занимавшиеся им ресурсы высвобождаются.

ВНИМАНИЕ: Не следует пытаться из LUA-программы закрыть хэндл, используемый FAR-ом для работы
с HIVE-файлом, отображаемым в текущий момент на АКТИВНОЙ или ПАССИВНОЙ панели.
Такая операция не поддерживается.


@LUA_HiveName
$^#LUA-команда HiveName#
@-

#local sFullHivePath = Plugin.SyncCall (HiverGuid, HiveHandle, "HiveName")#
@+

Команда возвращает строковое значение, содержащее полный путь HIVE-файла в реальной файловой системе.

Параметр #HiveHandle# задает хэндл HIVE-файла, к которому относится команда.



@LUA_cd
$^#LUA-команда CD#
@-

#local bFound,nSubItems = Plugin.SyncCall (HiverGuid, HiveHandle, Command)#

где параметр #Command# предствляет собой строку вида:

#"cd [\"]<hive-path>[\"]"#

@+

Команда устанавливает заданную параметром <hive-path> виртуальную директорию в качестве текущей.

Параметр #HiveHandle# задает хэндл HIVE-файла, к которому относится команда.
В качестве разделителей элементов #<hive-path># могут произвольно использоваться как прямые, так и обратные слэши.
Поддерживаются как абсолютные, так и относительные пути.
В случае, если #<hive-path># содержит пробелы, он должен быть заключен в кавычки.

@-
Возвращаемые значения:
1. BOOLEAN: TRUE, если #<hive-path># найден; в противном случае - FALSE
2. NUMERIC: количество элементов данных и/или поддиректорий в данной директории.

@+
Примеры использования команды #cd# см. в файле Artifacts\userassist.


@LUA_pwd
$^#LUA-команда PWD#
@-

#local sDirName,sDesc = Plugin.SyncCall (HiverGuid, HiveHandle, "pwd")#
@+

Команда позволяет получить имя текущей виртуальной директории HIVE-файла.

Параметр #HiveHandle# задает хэндл HIVE-файла, к которому относится команда.

@-
Возвращаемые значения:
1. STRING:  полный путь текущей виртуальной директории HIVE-файла;
2. STRING:  содержимое поля #Description# текущей виртуальной директории.

@+
Примеры использования команды #pwd# см. в файле Artifacts\userassist.


@LUA_GetItem
$^#LUA-команда GetItem#
@-

#local sName,xValue,nSubItems,sOpt = Plugin.SyncCall (HiverGuid, HiveHandle, Command[, nItemIndex])#

где параметр #Command# предствляет собой строку вида:

#"GetItem [[\"]<VirtPath>[\"] [-nocase]]"#

@+

Команда позволяет получить #ЗНАЧЕНИЕ#, а также ряд иных характеристик заданного элемента данных HIVE-файла.

Требуемый элемент данных может задаваться либо с помощью опции #VirtPath# параметра #Command#
(который задает имя элемента в виде абсолютного или относительного виртуального пути), либо
с помощью параметра #nItemIndex#, который задает индекс извлекаемого элемента данных в текущей виртуальной директории HIVE-файла. 

Если параметр #nItemIndex# задан, то #VirtPath# игнорируется.
Если #VirtPath# содержит пробелы, он должен быть заключен в кавычки.

Опция #-nocase# параметра #Command# позволяет искать требуемый элемент данный по имени без учета регистра.

Параметр #HiveHandle# задает хэндл HIVE-файла, к которому относится команда.

@-
Возвращаемые значения:
1. STRING:  #имя# извлекаемого элемента данных, либо #nil# если элемент не найден;
2. #ЗНАЧЕНИЕ# заданного элемента данных HIVE-файла (подробности см. ниже);
3. NUMERIC: #Количество подэлементов# (если элемент является виртуальной директорией), либо #nil#;
4. STRING:  #Класс ключа# HIVE-файла (если искомый элемент является ключом), либо #тип значения#
            (если искомый элемент представляет собой значение ключа HIVE-файла), либо #nil#. 

@+
Если извлекаемый элемент представляет собой ключ HIVE-файла из #TreeView#, то
в качестве #ЗНАЧЕНИЯ# возвращается дата и время модификации данного ключа в NUMERIC формате.
Это дает возможность LUA-программе сортировать ключи по времени их модификации.
Для дальнейшего преобразования такого #ЗНАЧЕНИЯ# в текстовый формат можно использовать
LUA-команду ~#GetFileTime#~@LUA_GetFileTime@.

Если извлекаемый элемент представляет собой виртуальную поддиректорию НЕ из #TreeView#,
в качестве #ЗНАЧЕНИЯ# возвращается содержимое поля #Description# (которое отобразилось бы FAR-ом
при отображении данной поддиректории на панели).

Если извлекаемый элемент представляет собой элементарный числовой или строковый элемент из #RawView#,
в качестве #ЗНАЧЕНИЯ# возвращается его числовое или строковое значение.

Если извлекаемый элемент представляет собой значение (VALUE) ключа HIVE-файла из #TreeView#,
в качестве #ЗНАЧЕНИЯ# возвращаются соответствующие данные, формат которых зависит от типа значения ключа:

@-
    #Тип значения ключа        Тип возвращаемой LUA-переменной#  
    REG_SZ                    String
    REG_EXPAND_SZ             String
    REG_LINK                  String
    REG_MULTI_SZ              Table   (of Strings)
    REG_QWORD                 Numeric
    REG_DWORD                 Numeric
    REG_DWORD_BIG_ENDIAN      Numeric

    REG_BINARY                Table   содержащий 1 элемент
    и все иные типы                   типа String

@+
Для работы со значениями ключей HIVE-файла типа REG_BINARY требуется LUA-библиотека "ffi".
Примеры использования команды #GetItem# с различными типами извлекаемых элементов см. в файлах Artifacts\userassist и Artifacts\devices.

Возвращаемый плагином #тип значения# ключа может быть одним из следующих:
"None", "String", "Expand String", "Binary", "Dword", "Dword_BE", "Link", "Multiline", "Resource List", "Resource Desc", "Resource Requirements", "Qword", "Unknown".


@LUA_GetKeyItem
$^#LUA-команда GetKeyItem#
@-

#local sName,xValue,nSubItems,sClass = Plugin.SyncCall (HiverGuid, HiveHandle, Command[, nItemIndex])#

где параметр #Command# предствляет собой строку вида:

#"GetKeyItem [[\"]<VirtPath>[\"] [-nocase]]"#

@+

Данная команда аналогична команде ~GetItem~@LUA_GetItem@ за исключением того, что
целевой элемент данных #ДОЛЖЕН# являться ключом реестра.
В противном случае команда в качестве #sName# вернет #nil#.

Данная команда полезна при работе с виртуальными директориями, в которых имена ключей и значений
могут совпадать. Например, при работе с виртуальной директорией HIVE-файла NTUSER.DAT:
@-

#\Treeview\Software\Microsoft\Windows\Shell\BagMRU#
@+


@LUA_GetValItem
$^#LUA-команда GetValItem#
@-

#local sName,xValue,nSubItems,sType = Plugin.SyncCall (HiverGuid, HiveHandle, Command[, nItemIndex])#

где параметр #Command# предствляет собой строку вида:

#"GetValItem [[\"]<VirtPath>[\"] [-nocase]]"#

@+

Данная команда аналогична команде ~GetItem~@LUA_GetItem@ за исключением того, что
целевой элемент данных #ДОЛЖЕН# являться значением ключа реестра.
В противном случае команда в качестве #sName# вернет #nil#.

Данная команда полезна при работе с виртуальными директориями, в которых имена ключей и значений
могут совпадать. Например, при работе с виртуальной директорией HIVE-файла NTUSER.DAT:
@-

#\Treeview\Software\Microsoft\Windows\Shell\BagMRU#
@+



@LUA_GetFileTime
$^#LUA-команда GetFileTime#
@-

#local sDate,sTime = Plugin.SyncCall (HiverGuid, HiveHandle, "GetFileTime", xParm)#
@+

Команда позволяет преобразовать LUA-переменную, содержащую количество 100-ns тиков
от начала эпохи (01.01.1601 00:00:00), в строковые дату и время.

В качестве параметра #HiveHandle# может быть передан #nil#.
 
Параметр #xParm# задает преобразуемую LUA-переменную и может содержать либо непосредственно 8-и байтовое двоичное
представление даты и времени (в этом случае переменная #xParm# должна представлять собой таблицу, 
содержащую РОВНО ОДИН элемент типа String длиной не менее 8-и), либо значение типа NUMERIC, полученное, например,
в результате применения LUA-команды ~#GetItem#~@LUA_GetItem@ к ключу HIVE-файла или применения
стандартной LUA-функции #tonumber()# к переменной, полученной в результате #ffi.cast()#
(пример такого использования команды #GetFileTime# см. в файле Artifacts\userassist).

@-
Возвращаемые значения:
1. STRING:  дата  в формате "dd.mm.yyyy";
2. STRING:  время в формате "hh:mm:ss.nnnnnnn".
@+


@LUA_GetDosTime
$^#LUA-команда GetDosTime#
@-

#local sDate,sTime = Plugin.SyncCall (HiverGuid, HiveHandle, "GetDosTime", xParm)#
@+

Команда позволяет преобразовать LUA-переменную, содержащую внутреннее
представление даты и времени в формате MS-DOS, в строковые дату и время.

В качестве параметра #HiveHandle# может быть передан #nil#.
 
Параметр #xParm# задает преобразуемую LUA-переменную и может содержать либо непосредственно 4-х байтовое двоичное
представление даты и времени в формате MS-DOS (в этом случае переменная #xParm# должна представлять собой таблицу, 
содержащую РОВНО ОДИН элемент типа String длиной не менее 4-х), либо значение типа NUMERIC, полученное, например,
в результате применения стандартной LUA-функции #tonumber()# к переменной, полученной в результате #ffi.cast()#
(пример аналогичного использования команды #GetFileTime# см. в файле Artifacts\userassist).

@-
Возвращаемые значения:
1. STRING:  дата  в формате "dd.mm.yyyy";
2. STRING:  время в формате "hh:mm:ss.nnnnnnn".
@+

Несмотря на то, что формат времени унифицирован с командой ~GetFileTime~@LUA_GetFileTime@,
время преобразуется лишь с точностью до 2-х секунд (вследствие особенностей данного формата хранения времени).


@LUA_Rot13
$^#LUA-команда Rot13#
@-

#local sEncodedString = Plugin.SyncCall (HiverGuid, HiveHandle, "rot13", sSourceString)#
@+

Команда перекодирует LUA-переменную типа String по алгоритму Rot13.

В качестве параметра #HiveHandle# может быть передан #nil#. 
Параметр #sSourceString# задает преобразуемую LUA-переменную.

@-
Возвращаемые значения:
1. STRING:  перекодированная строка.
@+

Пример использования команды #rot13# см. в файле Artifacts\userassist.


@LUA_Parse
$^#LUA-команда Parse#
@-

#local Names,Values,Descs,Offsets,Lengths,Depths = Plugin.SyncCall (HiverGuid, HiveHandle, "parse <what>", xParm[, nOffset[, nLen]])#
@+

Где:
    <what>      - обязательный аргумент, задающий формат разбираемого объекта. Может принимать
                  значения #SecDesc# или #SID#;
    xParm       - LUA-переменная, содержащая разбираемый объект;
    nOffset     - числовой параметр, задающий смещение (в байтах) разбираемого объекта 
                  внутри xParm (значение по умолчанию - 0);
    nLen        - числовой параметр, задающий максимальную длину (в байтах) разбираемого объекта
                  (по умолчанию - длина xParm);
    Names       - таблица имен элементов разбираемого объекта или nil (в случае неудачи при разборе);
    Values      - таблица значений элементов разбираемого объекта или nil (в случае неудачи при разборе);
    Descs       - таблица описаний элементов разбираемого объекта или nil (в случае неудачи при разборе);
    Offsets     - таблица смещений элементов разбираемого объекта или nil (в случае неудачи при разборе);
    Lengths     - таблица длин элементов разбираемого объекта или nil (в случае неудачи при разборе);
    Depths      - таблица глубин вложенности элементов разбираемого объекта или nil (в случае неудачи при разборе).

Эта команда позволяет LUA-программе осуществить разбор данных, содержащихся в переменной xParm. Такой разбор может
быть полезен в случаях, когда значение переменной xParm было получено из внешнего источника (в том числе, считано из
HIVE-файла) и включает в себя структуру (или структуры) данных, определяемую аргументом #<what>#:

    #parse SecDesc#  - содержимое xParm трактуется как Security Descriptor в соответствии с [MS-DTYP];
    #parse SID#      - содержимое xParm трактуется как идентификатор безопасности (SID) в соответствии с [MS-DTYP]; 

Параметр #xParm# должен представлять собой таблицу, содержащую РОВНО ОДИН элемент типа String. То есть,
должны выполняться условия: type(xParm)=="table", ##xParm==1 и type(xParm[1])=="string".  Это необходимо для того,
чтобы обеспечить передачу значения xParm в плагин в виде двоичного буфера (FMVT_BINARY) без промежуточных преобразований.

Параметр #nOffset# должен быть целым числом и находиться в границах от нуля до ##xParm[1]. Если значение
переменной #xParm# включает в себя несколько структур, подлежащих разбору,
можно последовательно вызывать плагин с одним и тем же #xParm# и различными #nOffset#.

Результатом разбора являются 6 линейных таблиц, совокупность которых представляет собой линейный образ дерева разбора
заданного объекта. Последовательность элементов в указанных таблицах соответствует последовательности 
перебора узлов дерева разбора при его стандартном рекурсивном обходе. При этом, для каждого i-того узла
значение Depths[i] отражает глубину вложенности данного узла.

Такое представление позволяет LUA-программе осуществлять как тривиальный экспорт результатов разбора в плоский файл,
так и полностью восстановить древовидную структуру разобранного объекта.  


