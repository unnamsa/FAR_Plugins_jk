.Language=Russian,Russian (Русский)
.PluginContents=LookDBF
.Options CtrlColorChar=\

@Contents
$^#LookDBF version 2.06 beta. 18.12.2006#

  ~Клавиши~@Functions@
  ~Строка статуса~@Status@
  ~Редактирование~@Edit@
  ~Поиск и замена~@Search@
  ~Поиск по условию~@Cond@
  ~Поиск по 3-м и более условиям~@Cond3@
  ~Экспорт~@Export@
  ~Импорт~@Import@
  ~Командная строка~@Command@ 
  ~Кодовые таблицы~@Tables@ 
  ~Конфигурация~@Config@ 
  ~Шаблон~@Templ@ 
  ~Мнимые поля~@Dummy@
  ~Настройка цветов~@Colors@
  ~Служебное поле _NullFlags~@_NullFlags@

  Автор: #Алексей Болтунов#  
  ~MailTo:alexbolt@@mail.ru~@mailto:alexbolt@@mail.ru@
  ~MailTo:alexbolt@@narod.ru~@mailto:alexbolt@@narod.ru@

  Последнюю версию плагина можно взять здесь:
  ~http://alexbolt.narod.ru/soft/LOOKDBF.ZIP~@http://alexbolt.narod.ru/soft/LOOKDBF.ZIP@

  Плагин #БЕСПЛАТНЫЙ#. 
  Для тех же, кто сочтет необходимым вознаградить автора за труд, сообщаю свои реквизиты WebMoney: 
 
  WMID:#009807013498#
      #Z804712443609#
      #R420742948431#

@Functions
$ #Функции:#
     #Ctrl+Home# - на первое поле первой записи
      #Ctrl+End# - на последнее поле последней записи
     #Ctrl+PgUp# - на текущее поле первой записи
     #Ctrl+PgDn# - на текущее поле последней записи
           #Tab# - на следущее поле (вправо)
     #Shift+Tab# - на предыдущее поле (влево)

        #Ctrl─# - переставить столбец влево
        #Ctrl─# - переставить столбец вправо
       #Shift─# - уменьшить ширину столбца
       #Shift─# - увеличить ширину столбца
     #Shift+Del# - спрятать столбец
     #Shift+Ins# - показать столбец
   #Shift+Enter# - изменить название столбца
 #Alt─ | Alt─# - прокрутка широкого столбца
      #Alt+Home# - прокрутка влево до упора
       #Alt+End# - прокрутка вправо до упора

       #Ctrl+F2# - удалить неактуальные записи (Pack)
      #Shift+F2# - редактировать заголовок DBF-файла
            #F4# - ~редактировать или добавить~@Edit@ запись
         #Enter# - ~редактировать~@Edit@ текущее поле
      #Ctrl+Del# - установить текущее поле в ~NULL~@_NullFlags@
        #Delete# - установить или сбросить признак удаления
        #Ctrl+D# - установить признак удаления на всех помеченных
        #Ctrl+I# - сбросить признак удаления на всех помеченных

        #Alt+F8# - переход вверх -N, вниз +N, на заданную запись N
   #Ctrl+F | F7# - поиск по строке
        #Alt+F7# - поиск по условию
 #F3 | Shift+F7# - продолжить поиск
       #Ctrl+F7# - замена

  #Пробел | Ins# - пометить/разметить текущую запись
       #Серый +# - пометить все
       #Серый -# - разметить все
       #Серая *# - инвертировать пометку всех записей
  #Ctrl+Серая *# - пометить все НЕактуальные записи
       #Shift+# - пометить текущую и сместиться вниз
       #Shift+# - пометить текущую и сместиться вверх
        #Ctrl+# - перейти к следующей отмеченной записи
        #Ctrl+# - перейти к предыдущей отмеченной записи
            #F5# - показать все/только помеченные записи
            #F6# - суммы видимых числовых полей отмеченных записей

            #F2# - показать структуру таблицы
            #F3# - показать содержимое текущего поля Memo (вьюер)
            #F4# - показать содержимое текущего поля Memo (редактор)
      #Ctrl+Ins - (Ctrl+C)# скопировать текущее поле в карман
            #F9# - ~Экспорт~@Export@
      #Shift+F9# - ~Импорт~@Import@
      #Shift+F8# - Выбор ~кодовой таблицы~@Tables@ 
        #Alt+F1# - ~Конфигурация~@Config@ 
      #Shift+F6# - Запомнить ~шаблон~@Templ@ 
        #Alt+F6# - Сбросить ~шаблон~@Templ@ 
       #Ctrl+F6# - Сбросить и удалить ~шаблон~@Templ@ 
     #Shift+F10# - Выйти и запомнить ~шаблон~@Templ@ 

  ~Содержание~@Contents@

@Status
$ #Строка статуса.#
\1b
     Число спрятанных    Общее число записей. Клик здесь мышкой    
             столбцов    равносилен Ctrl+PgDn                      
    ─────────────────┐   ─────────────────────────────────────────┐ 
   Число помеченных  │   Номер текущей записи. Клик здесь         │ 
            записей  │   мышкой равносилен Ctrl+PgUp              │ 
    ──────────────┐  │   ────────────────────────────────────┐    │ 
                  │  │   Общее число столбцов                │    │
                  │  │   ───────────────────────────────┐    │    │
        Кодировка │  │   Номер текущего столбца         │    │    │
        ────┬──── │  │   ────────────────────────────┐  │    │    │
            │     │  │   Текущая строка для поиска   │  │    │    │
  Имя файла │     │  │   ───────────────┐            │  │    │    │
  ──┬────── │     │  │   Режимы поиска  │            │  │    │    │
    │       │     │  │   ─────────┐     │            │  │    │    │
                                                         
@-
\30 CALL.DBF  Win \3e  324 \3b1            \31A<142043>         \3b4/10\30    28/11097
\1f*│CALL_ID│BATCH│ZONE_ID│PHONE_IN │DATE             │SUMM    │NUMBER │
\1b │2      │ 12  │242    │    29774│02/10/98-13:00:00│    7.14│ 471560│
\1e │2      │ 12  │232    │    42385│02/10/98-14:00:00│   11.40│ 471550│
 │2      │ 17  │233    │      613│03/10/98-21:00:00│   20.52│ 473630│
\30 │2      │ 23  │096    │\4b   142043\30│04/10/98-22:00:00│  149.70│ 473121│
\1b │2      │ 33  │231    │    28566│05/10/98-21:00:00│   13.68│ 471834│
\-
@+

  Примечания:
  1. Режимы поиска: а - учитывать регистр, А - не учитывать;
                     - по всем полям,     ! - по текущему.
  2. Клик мышкой в левой части строки заголовков полей равносилен
     клавише Home, а в правой части - клавише End.
  3. Двойной клик мышкой по верхней видимой записи равносилен
     клавише PgUp, а по нижней - клавише PgDn.
  
  ~Содержание~@Contents@

@Edit
$  #Замечания к редактированию.#
$^\34Внимание!\-
$^Просматриваемый файл изменяется сразу же
$^после нажатия соответствующих кнопок.
$^\34Пожалуйста, делайте резервные копии перед редактированием!\-

   #Спрятанные поля# на редактирование не вызываются.
   При редактировании (кнопка [Сохранить]) их содержимое не изменяется.
   При добавлении (кнопка [Добавить]) в них помещаются пустые значения.

   #Поля Date и DateTime# вводятся по формату ввода, заданному в
~конфигурации.~@Config@ При некорректном их вводе (14 месяц, 25 час и т.п.)
в поле будет помещено пустое значение.

   #Поля Integer, Double и Currency# при редактировании нужно вводить именно в
таком виде, в котором их показывает LookDBF. В случаях, когда LookDBF не может
распознать Ваш набор, в поле будет помещено пустое значение.

  ~Содержание~@Contents@

@Search
$  #Поиск и замена.#
$^\34Внимание!\-
$^Просматриваемый файл изменяется сразу же
$^после нажатия соответствующих кнопок.
$^\34Пожалуйста, делайте резервные копии перед редактированием!\-
   
   #Спрятанные поля (столбы)# ни в поиске, ни в замене не участвуют.
   
   #Поиск# производится вправо и вниз от текущей позиции.

   #Замена# производится по всему файлу. Для ограничения замены Вы можете
производить замену только в помеченных, либо только в непомеченных записях.
Если в поле содержится несколько образцов для замены, все они будут
последовательно заменены.

   #Специальные поля# Date, DateTime, Integer, Double, Currency перед
проверкой на совпадение с поисковой строкой преобразуются в текстовый вид.
В текстовом же виде производится замена, после чего выполняется обратное
преобразование для сохранения в файле. Если такое преобразование не может
быть выполнено, потому что после замены образовалось некорректное значение
(например, 14-й месяц или 65-я минута), то в это поле будет помещено пустое
значение.
   #Важно!# Поля Date и DateTime преобразуются в текстовый по формату для
показа. После замены они опять же по этому формату преобразуются в форму
хранения в файле. Если в формате для показа отсутствуют какие-то элементы
даты или времени, то при обратном преобразованиии будут действовать умолчания
(см. ~Конфигурация~@Config@).

   #Маскирование#
   Вы можете вводить для поиска не только образец, но и маску, для построения
которой нужно использовать маскирующие символы. 
   1-й символ - "сингл-маска" (по умолчанию "?") означает 1 любой символ,
который должен существовать. 
   2-й символ - "мульти-маска" (по умолчанию "%") означает любое количество
любых символов, в том числе и их отсутствие.
   Вы можете изменить маскирующие символы прямо в диалоге поиска (замены)
временно, на текущий сеанс, либо постоянно из диалога ~конфигурации.~@Config@
   Маска может быть применена и в строке, на которую будет заменяться найденная.
В этом случае, при замене в этом месте будут оставлены оригинальные символы.
Если же строка замены больше, чем строка поиска, и оригинальных символов нет,
будут вставлены пробелы.

   #Применение мульти-маски имеет особенности:#

   1. Использование мульти-маски в начале или в конце образца для поиска роли не
играет, так как образец все равно ищется внутри строки и если Вы зададите
образец "a", или "%a", или "a%", или "%a%", он все равно будет найден.
   Однако, если Вы делаете замену, то разница в этих образцах огромна:
    a  - будет заменен только символ "a";
   %a  - будет заменена подстрока от начала 
         строки до символа "а" включительно;
    a% - будет заменена подстрока от символа "а" 
         включительно и до конца строки;
   %a% - будет полностью заменена вся строка.

   2. Сравнение с образцом происходит слева направо, поэтому будет найдена
подстрока максимальная слева и минимальная справа. Например:
   Образец: a%b
   Строка: 1a2a3a1b2b3b
   Будет найдена (и заменена, если идет замена) подстрока "a2a3a1b", хотя внутри
этой строки можно найти еще несколько подстрок, удовлетворяющих заданному образцу.

  ~Содержание~@Contents@

@Cond
$  #Поиск по условию.#
   
   #Спрятанные поля (столбы)# в поиске не участвуют.

   #Поиск# по условию производится вниз от текущей позиции.

   #Логические операции#
   Поиск по условию допускает применение различных логических операций
между двумя отношениями. N/A - не операция, это озачает, что для поиска 
используется только одно отношение. Ниже приводится таблица действия
возможных операций, где буквами А и В обозначаются первое и второе отношение
соответственно:
         
   ┌───┬───┬───────┬───────┬───────┬───────┐
   │ A │ B │A and B│ A or B│A xor B│A nxo B│
   ├───┼───┼───────┼───────┼───────┼───────┤
   │Да │Да │  Да   │   Да  │  Нет  │  Да   │
   ├───┼───┼───────┼───────┼───────┼───────┤
   │Да │Нет│  Нет  │   Да  │  Да   │  Нет  │
   ├───┼───┼───────┼───────┼───────┼───────┤
   │Нет│Да │  Нет  │   Да  │  Да   │  Нет  │
   ├───┼───┼───────┼───────┼───────┼───────┤
   │Нет│Нет│  Нет  │   Нет │  Нет  │  Да   │
   └───┴───┴───────┴───────┴───────┴───────┘
                                 
   #Маскирование#
   Задавая условие на равенство (=) или неравенство (<>) символьных полей
Вы можете использовать маскирующие символы. 1-й символ - "сингл-маска" (по
умолчанию "?") означает 1 любой символ, который должен существовать. 2-й символ
- "мульти-маска" (по умолчанию "%") означает любое количество любых символов,
в том числе и их отсутствие. 
   Поэтому употребление обоих символов подряд имеет смысл:

   %а% - строка содержащая "а" в любом месте, в том числе и в начале;
   ?%а% - строка содержащая "а" в любом месте, начиная со 2-го.

   #Внимание!#
   С введением маскирующих символов алгоритм проверки символьных полей на
равенство или неравенство со строкой по сравнению с предыдущими версиями
изменился. Если раньше равенство выполнялось, если поле начиналось с заданного
образца, а неравенство выполнялось, если поле не начиналось с заданного
образца, то теперь для задания таких же условий требуется применение
мульти-маски. А для выполнения равенства без применения масок требуется полное
совпадение символьного поля с заданным образцом.

   #Пробелы справа отбрасываются как в образце, так и в поле!#

   #Маски действуют только при сравнении символьных полей на равенство и#
#неравенство. В других случаях при поиске по условию они рассматриваются как#
#обычные символы.#


  ~Содержание~@Contents@

@Cond3
$  #Поиск по 3-м и более условиям.#
   Как известно, LookDBF за 1 прием может провести поиск максимум по двум
условиям. 
   Более или менее регулярно я получаю письма, где пользователи просят
увеличить это число. Я же активно не хочу этого делать, и в следующих версиях
не планирую. Наверное, будет правильно, если я публично изложу свои резоны:

    #1.# По моему глубокому убеждению поиск по 1-2 условиям покрывает 99
процентов потребности.
    #2.# Поиск по более чем 2 условиям #катастрофически# усложняет как алгоритм
поиска, так и диалог задания условий.
    #3.# Поиск по более чем 2 условиям возможен в LookDBF в несколько приемов,
если использовать кнопки [Пометить найденные] и [Разметить найденные]. Приведу
пример:

    Допустим есть таблица с полями A,B,C,D. Стоит задача: найти все записи, где

    #A>1 and B>2 and C>3 and D>4#

    Действуем в два этапа:

    1) Задаем поиск с условием #A>1 and B>2# и нажимаем [Пометить найденные]
    2) Задаем поиск с условием #C<=3 or D<=4# и нажимаем [Разметить найденные]

    Задача решена! Останутся помеченными только те записи, которые удовлетворяют
первоначальному большому условию.

    Не буду уверять вас, что это удобно, но ведь и не часто требуется.

  ~Содержание~@Contents@

@Export
$ #Экспорт.#

    #В любом случае#

    При выборе "Сохранить пустую базу" экспортируется только заголовок.
    Экспортируются лишь помеченные записи.
    Если помеченных нет, то экспортируются все.
    Спрятанные поля НЕ экспортируются!
    Имена полей экспортируются измененные (~Shift+Enter~@Contents@).

    #Сортировка#

    Сортировка НЕ выполняется, если не задан 1-й ключ.
    Сортировка по 3-му ключу НЕ выполняется, если не задан 2-й ключ.
    Сортировка ведется по 1-му ключу. Записи с одинковыми значениями 1-го
ключа сортируются по 2-му, если он задан. Записи с одинаковыми значениями и
1-го и 2-го ключа сортируются по 3-му, если он задан.
    Записи с одинаковыми значениями всех участвующих в сортировке ключей
экспортируются в том порядке, в котором они были в исходном файле.
    Вы можете сами задать размер буфера сортировки. Этот размер означает, что
именно столько отсортированных записей отбираетася за один проход по файлу.
Это число не может быть меньше 2 и больше, чем общее число записей. Так что
Ваш ввод корректируется по этим критериям. Оптимальный размер буфера зависит
от общего числа сортируемых записей. По умолчанию выбран размер 256. Именно
такой размер оказался оптимальным для файла с 15000 - 20000 записями.

    #Экспорт в текстовый файл TXT#

    Если выбран режим "Сохранять пробелы", то используются те ширины столбцов,
которые, возможно, были изменены (~Shift─~@Contents@). При этом может быть
не экспортирована значимая информация. Если этот режим не выбран, то ширины
вообще не учитываются и гарантируется экспорт всех значимых символов.
    Сказанное выше не относится к полям типа D и T. Они выводятся так, как
задано в формате экспорта. Если Вы хотите их как-то обрезать при экспорте, то
Вам необходимо изменить формат.
   
    По умолчанию предлагается разделитель │ (0xB3). При экспорте в кодировке Win он
будет перекодирован в код (0xA6), чтобы получить нужный результат в
кодировке Win.

    Если Вы в окне разделителя задали 2 символа, LookDBF пытается их
интерпретирвать как шестнадцатиричный код. Если это удается, используется
символ с этим кодом, если нет, то используется первый заданный символ.

    #Экспорт в гипертекстовый файл HTM#

    Пункты "Сохранять пробелы" и "Разделитель" игнорируются.
    Пробелы удаляются, экспортируется только значимая информация.
    Если поле пустое, экспортируется последовательность &nbsp;. Это позволяет
Internet Explorer корректно отображать пустые ячейки таблицы.

    Теги для экспорта в HTM-файл храняться в файлах LookDBF_xx.lng. Там их
можно поменять, если те Вас не устраивают. Если Вы это сделали, не забудте
выполнить ClearPluginsCache.bat и перезапустить FAR.

    #Экспорт в базу данных DBF#

    Если имена полей были изменены, используются измененные имена. Однако,
поскольку при изменении можно задавать длинные имена (до 25 символов), а
стандарт DBF допускает максимум 10, измененные имена обрезаются справа до 10
символов.
    
    Пункт "Сохранять пробелы" игнорируется. Размеры экспортируемых полей
остаются такими же, как в оригинале.

    Пункт "Тип файла" используется для задания типа (первого байта) генерируемого файла DBF.
Если пункт "Тип файла" не выбран, тип файла переносится из оригинала, Если выбран,
он должен быть задан двумя шестнадцатиричными цифрами. Если LookDBF не смог
таким образом интерпретировать заданные символы, будет использован тип оригинала.


  ~Содержание~@Contents@

@Import
$  #Импорт.#
   LookDBF может импортировать только DBF-файлы и только в конец
просматриваемого файла. Импортируются только те поля, для которых в
просматриваемом файле есть совпадающие по имени и формату одновременно.
   Остальные поля, которых нет в импортируемом файле заполняются пустыми
значениями.

  ~Содержание~@Contents@

@Command
$ #Командная строка:  LookDBF:[options] <filename>#

   #Options:#
   #/d# или #/D# - старт с кодировкой Dos (по умолчанию Win)
   #/n# или #/N# - показывать номера записей
   #/m# или #/M# - использовать полный экран при просмотре мемо
   #/e# или #/E# - разрешение функций редактирования:
               Enter, F4, Del, Ctrl+D, Ctrl+I

    Допустимы пробелы между командой и опцией, между опциями и между опцией и
именем файла. Между / и буквой опции пробелы недопустимы.

    Опция должна начинаться с /. Если опций несколько, каждая должна
начинаться с /.

       Правильно:  LookDBF: /d/e example.dbf

     Неправильно:  LookDBF: /de example.dbf

    Опции #/d#, #/n# и #/m#, будучи заданы в командной строке перекрывают
аналогичные параметры из конфигурации плагина.

  ~Содержание~@Contents@

@Tables 
$ #Кодовые таблицы#

   LookDBF может работать одновременно только с двумя кодовыми таблицами.

   Одна из них всегда OEM (DOS). В случае русской версии Windows - это CP 866.
   Второй была текущая страница Windows (в случае русской версии Windows -
CP 1251). К сожалению, выяснилось, что стандартные функции (CharToOem,
OemToChar) не все символы (например, украинские буквы Ii) корректно
переводят из одной кодировки в другую.
   
   Теперь в качестве второй таблицы можно выбрать любую другую из числа
загруженных в FAR. Для этого можно использовать клавишу Shift+F8 или
диалог конфигурации плагина. Текущая кодовая страница запоминается и в
шаблоне.

   Если второй таблицей выбрана текущая страница Windows, то она будет
обозначаться "Win", если какая-то другая, то "Alt". Посмотреть, какая
именно таблица используется в настоящий момент можно по клавише Shift+F8
(курсор будет стоять на текущей таблице).

   Для того, чтобы правильно отображались украинские буквы Ii, рекомендуется
использовать кодовую таблицу "Cyrillic - Windows-1251", которая имеется в поставке
FAR.

  ~Содержание~@Contents@

@Config
$ #Конфигурация#

    Конфигурация позволяет сделать нужные Вам параметры плагина постоянными,
чтобы не настраивать их при каждом сеансе. Конфигурация может быть вызвана как
из меню Far (Параметры/Параметры внешних модулей/LookDBF), так и непосредственно
из плагина ~клавишей~@Functions@ Alt+F1.
    Вы можете изменять почти все эти параметры другим способом (НЕ через меню
конфигурации), и тогда они будут действовать только на текущий сеанс.

    #Кодировка по умолчанию# задает кодировку символов, с которой запускается
LookDBF. Может быть изменена опцией ~командной строки~@Command@ #/d#. В течение
сеанса кодировка изменяется ~клавишей~@Functions@ F8.

    #Показывать номера строк# задает высвечивание номеров записей. Может быть
изменено опцией ~командной строки~@Command@ #/n#. В течение сеанса может быть
изменено только через вызов конфигурации.

    #Показывать мемо на весь экран# задает просмотр мемо-поля на полный экран
(иначе на 1/2 экрана). Может быть изменено опцией ~командной строки~@Command@
#/m#. В течение сеанса может быть изменено только через вызов конфигурации.

    #Разделитель экспорта# - разделитель между полями при экспорте в текстовый
файл. Если Вы задали 2 символа, LookDBF пытается их интерпретирвать как
шестнадцатиричный код. Если это удается, используется символ с этим кодом, если
нет, то используется первый заданный символ. В течение сеанса может быть
изменен в диалоге ~экспорта~@Export@.

    #Автоматически сохранять шаблон# задает автоматическое сохранение
~шаблона~@Templ@ при выходе из плагина. В течение сеанса может быть изменено
только через вызов конфигурации.

    #Маскирующие символы# - символы, используемые для маскирования при поиске и
замене (см. раздел ~Поиск и замена~@Search@). В течение сеанса могут быть
изменены в диалоге поиска или замены.

    #Цвета# - Настройку цветов смотреть ~здесь.~@Colors@

    #Таблица# - Выбор кодовой таблицы. Смотри ~здесь.~@Tables@

    #Мемо# - Соответствия расширений файлов-таблиц и мемо-файлов.
    Каждое соответствие задается в виде группы \31TTT:MMM\-, где
        \31TTT\- - расширение файла-таблицы
        \31MMM\- - расширение соответствующего мемо-файла.
    Можно задавать несколько групп, разделенных запятыми. Число
соответствий ограничивается длиной строки - 255 символов. Допускаются расширения
не только из трех символов, но и произвольной (в разумных пределах) длины,
в том числе и пустые.
    Если в строке отсутствует расширение просматриваемого файла-таблицы, в
качестве мемо-файла будет сделана попытка открыть файл с расширением \31FPT\- для
таблиц FoxPro или с расширением \31DBT\- для всех остальных.
    По умолчанию эта строка содержит соответствия для файлов Visual FoxPro:
      DBC:DCT Database container
      FRX:FRT Report              
      SCX:SCT Form                
      MNX:MNT Menu                
      VCX:VCT Visual class library
      PJX:PJT Project             
    \34Внимание!\- Все пробелы в этой строке рассматриваются как часть того или иного
расширения. 
    Например, строка \31:XXX,YYY:,A A:BBB\- означает, что для файла-таблицы
без расширения (:XXX) в качестве мемо-файла будет открываться файл с расширением
XXX, для файла-таблицы с расширением YYY (YYY:) будет открываться мемо-файл без
расширения, а для файла-таблицы с расширением A A (A A:BBB) будет открываться
мемо-файл с расширением BBB.

    #Форматы даты и времени#
    Вы имеете возможность задать форматы для поля типа D (Date) и типа
T (DateTime). Форматы задаются отдельно для показа, отдельно для ввода
(редактирования) и отдельно для экспорта. В течение сеанса форматы для экспорта
могут быть изменены в диалоге ~экспорта~@Export@. Остальные форматы могут быть
изменены только через вызов конфигурации.

    #Элементы формата даты и времени:#

    #dd# или #DD# - число месяца. Распознается именно две подряд буквы d.
Одиночная буква d ничем не заменится и так и будет выведена. Если Вы зададите
подряд три буквы d, то первые две будут заменены на число месяца, а третья не
будет заменена ничем. Четыре подряд буквы d заменятся попарно на число месяца.
И т.д.

    #mm# или #MM# - номер месяца. Распознавание аналогично числу месяца.
    #yy# или #YY# - две последние цифры года. Распознавание аналогично числу
месяца, за исключением того, что четыре буквы подряд  #yyyy# или #YYYY#
распознаются как полный год.
    #hh# или #HH# - час суток. Распознавание аналогично числу месяца.
    #mi# или #MI# - минуты.
    #se# или #SE# - секунды.
   #iii# или #III# - милисекунды.
    #ii# или #II#  - сотые доли секунды.
     #i# или #I#   - десятые доли секунды.

    #Внимание!#
    Формат даты и времени для ввода (редактирования) используется и для
задания констант даты и времени, которые участвуют в поиске по условию.
Если Вы удалите из формата какие-то из его составляющих, и,
следовательно не сможете ввести их при редактировании, то тогда Вы должны быть
готовы к неожиданностям, так как будут действовать следующие умолчания:
    - если год отсутствует полностью, считается, что он 2000;
    - если год задан двумя цифрами, то >50 трактуются как 19yy, иначе 20yy;
    - если отсутствует месяц, считается, что он 01 - январь;
    - если отсутствует день, считается, что он 01;
    - если отсутствует какая-то из составляющих частей времени, она считается 0.

  ~Содержание~@Contents@

@Templ
$ #Шаблон#
    Под шаблоном понимается параметры просмотра файла (см. ниже), которые могут
сохраняться индивидуально для каждого просматриваемого DBF-файла.
    Шаблон сохраняется в текущем каталоге в виде скрытого файла с тем же именем,
что и просматриваемый, но с расширением tmp. При вызове плагина проверяется
наличие такого файла и, если он есть, то параметры просмотра считываются оттуда.
    Есть возможность запоминания шаблона как по клавише (Shift+F6), так и
автоматически при выходе из плагина. Кроме этого можно сбросить действие
шаблона (Alt+F6) и сбросить с одновременным удалением шаблона (Ctrl+F6).

    #Параметры просмотра в шаблоне#

    1. Кодировка русских букв.
    2. Показывать (не показывать) номера записей.
    3. Полный (половина) экран при просмотре мемо.
    4. Автоматически сохранять (не сохранять) шаблон.
    5. Маскирующие символы.
    6. Форматы даты и даты-времени.
    7. Параметры диалогов поиска, замены и экспорта.
    8. Параметры показа столбцов, то есть ширины, переименование, спрятанность,
перестановка.
    9. Текущая позиция.
   10. Кодовая таблица.

  ~Содержание~@Contents@

@Dummy
$ #Мнимые поля#
   В заголовке файла DBF с одной стророны задается длина одной записи в байтах,
а с другой стороны описывется каждое поле в записи и каждое поле имеет свою
длину. 
   Если сумма длин полей превышает длину записи, такой файл трактуется как
испорченный и не просматривается.
   Если сумма длин полей равна длине записи, это нормальный файл.
   Если же сумма длин полей меньше, чем длина записи, то в каждой записи остается
хвост, обычно заполненный пробелами, который вряд ли может использоваться
стандартными СУБД.
   LookDBF в таком случае генерирует, так называемые, мнимые поля с типом
# - Dummy. Генерируется столько полей, сколько нужно, чтобы покрыть этот хвост.
Полям присваиваются имена ##1##, ##2##, и так далее. Этими полями можно
манипулировать так же как и обычными полями типа C - Character.
   При экспорте таких полей в текстовый и гипертекстовый файл проблем не
возникает. А при экспорте в DBF такие поля нельзя переносить перед нормальными
полями. В противном случае файл, полученный в результате экспорта будет
испорчен, так как в заголовок файла эти поля не попадут.

  ~Содержание~@Contents@

@Colors
$ #Настройка цветов:#
    Цвета можно изменить с помощью строки "Цвета" конфигурации. Если какие-то
цвета в этой строке не заданы, будут использованы цвета по умолчанию, которые
перечислены ниже. Изменить можно цветовые атрибуты всех объектов плагина, за
исключением диалогов и сообщений (там используются текущие цвета FAR).

    Каждый цвет в этой строке определяется группой из 3 символов. Группы в
строке могут следовать подряд, а могут перемежаться какими-то разделителями.
Порядок следования групп роли не играет. Состав группы следующий:

    1-й символ - признак цвета (см. список ниже)
    2-й символ - шестнадцатиричная цифра - цвет фона
    3-й символ - шестнадцатиричная цифра - цвет текста.

    Список цветов:

 a07 - номера F-клавиш    ──────────────── Cтрока F-клавиш
 b30 - пояснения к ним
 c1F - строка заголовков полей
 d1B - основной текст     ──────────────── Основное окно
 e30 - текущая запись
 f4B - текущее поле
 g1E - помеченный основной текст
 h3E - помеченная текущая запись
 i4E - помеченное текущее поле
 j30 - имя файла          ──────────────── Строка статуса
 k30 - кодировка
 l31 - подстрока поиска
 m3B - номер текущего и общее число полей
 n30 - номер текущей и общее число записей
 o3E - число помеченных записей
 p3B - число спрятанных столбцов
 q78 - неизмененный текст ────── Редактирование текущего поля
 r5B - редактируемый текст
 s5E - редактируемый текст в помеченной записи

    В шестнадцатиричных цифрах необходимо использовать большие буквы A...F,
чтобы они не пересекались с буквами признаками, которые должны быть обязательно
маленькими.

    LookDBF анализирует строку "Цвета" следующим образом:
    Для каждого из перечисленных выше цветов в строке ищется его признак.
Если признак не найден - цвет не изменяется. Если признак найден, то 2 символа,
следующие непосредственно за ним трактуются как шестнадцатиричные цифры нового
цветового атрибута. Если трактовка окажется неуспешной - цвет тоже не изменяется.

  ~Содержание~@Contents@

@_NullFlags
$ #Служебное поле _NullFlags#
    LookDBF теперь поддерживает служебное поле _NullFlags, которое используется
Visual FoxPro для следующих целей:

    #Поддержка отсутствия значения (Null)#

    Поле может быть объявлено nullable, то есть для него допустимо отсутствие
значения. Этот факт отражается установкой бита 1 (второй справа) в 18-м байте
заголовка поля.
    Теперь при показе структуры таблицы (F2) поля, которые могут не иметь значения
(nullable fields) отмечаются в структуре словом Null справа.
    Поля, не имеющие значения, теперь отображаются строкой Null.
    Факт наличия или отсутствия значения обеспечивается соответствующим битом в
служебном поле _NullFlags. 
    При редактировании такого текущего поля Null-флаг ( бит в поле _NullFlags)
сбрасывается. Чтобы установить этот флаг (то есть пометить поле, как не имеющее
значения), следует воспользоваться клавишей Ctrl+Del.

    #Поддержка полей переменной длины#

    В VFP с версии 9 добавлена поддержка полей переменной длины V - VarChar и 
Q - VarBinary. Поддержка этих полей так же задействует служебное поле _NullFlags.
    Для этих полей при создании задается максимальная длина, и именно это
количество байт в файле физически и занимается. Если же значение поля меньше
максимальной длины, то устанавливается соответствующий бит в поле _NullFlags
и конкретная длина вписывается в последний байт отведенной для поля цепочки.

  ~Содержание~@Contents@
